// Code generated by protoc-gen-go. DO NOT EDIT.
// source: echo.proto

package go_grpc_echo_pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Ping struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ping) Reset()         { *m = Ping{} }
func (m *Ping) String() string { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()    {}
func (*Ping) Descriptor() ([]byte, []int) {
	return fileDescriptor_echo_8ff4649e9e7bff03, []int{0}
}
func (m *Ping) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ping.Unmarshal(m, b)
}
func (m *Ping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ping.Marshal(b, m, deterministic)
}
func (dst *Ping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ping.Merge(dst, src)
}
func (m *Ping) XXX_Size() int {
	return xxx_messageInfo_Ping.Size(m)
}
func (m *Ping) XXX_DiscardUnknown() {
	xxx_messageInfo_Ping.DiscardUnknown(m)
}

var xxx_messageInfo_Ping proto.InternalMessageInfo

func (m *Ping) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type Pong struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Timestamp            int64    `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Hostname             string   `protobuf:"bytes,3,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Header               string   `protobuf:"bytes,4,opt,name=header,proto3" json:"header,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Pong) Reset()         { *m = Pong{} }
func (m *Pong) String() string { return proto.CompactTextString(m) }
func (*Pong) ProtoMessage()    {}
func (*Pong) Descriptor() ([]byte, []int) {
	return fileDescriptor_echo_8ff4649e9e7bff03, []int{1}
}
func (m *Pong) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Pong.Unmarshal(m, b)
}
func (m *Pong) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Pong.Marshal(b, m, deterministic)
}
func (dst *Pong) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pong.Merge(dst, src)
}
func (m *Pong) XXX_Size() int {
	return xxx_messageInfo_Pong.Size(m)
}
func (m *Pong) XXX_DiscardUnknown() {
	xxx_messageInfo_Pong.DiscardUnknown(m)
}

var xxx_messageInfo_Pong proto.InternalMessageInfo

func (m *Pong) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Pong) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Pong) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *Pong) GetHeader() string {
	if m != nil {
		return m.Header
	}
	return ""
}

func init() {
	proto.RegisterType((*Ping)(nil), "go_grpc_echo_pb.Ping")
	proto.RegisterType((*Pong)(nil), "go_grpc_echo_pb.Pong")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EchoClient is the client API for Echo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EchoClient interface {
	Send(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error)
	// Subscribe opens a stream and returns the Ping message and an Unix timestamp every second.
	Subscribe(ctx context.Context, in *Ping, opts ...grpc.CallOption) (Echo_SubscribeClient, error)
}

type echoClient struct {
	cc *grpc.ClientConn
}

func NewEchoClient(cc *grpc.ClientConn) EchoClient {
	return &echoClient{cc}
}

func (c *echoClient) Send(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error) {
	out := new(Pong)
	err := c.cc.Invoke(ctx, "/go_grpc_echo_pb.Echo/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoClient) Subscribe(ctx context.Context, in *Ping, opts ...grpc.CallOption) (Echo_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Echo_serviceDesc.Streams[0], "/go_grpc_echo_pb.Echo/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &echoSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Echo_SubscribeClient interface {
	Recv() (*Pong, error)
	grpc.ClientStream
}

type echoSubscribeClient struct {
	grpc.ClientStream
}

func (x *echoSubscribeClient) Recv() (*Pong, error) {
	m := new(Pong)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EchoServer is the server API for Echo service.
type EchoServer interface {
	Send(context.Context, *Ping) (*Pong, error)
	// Subscribe opens a stream and returns the Ping message and an Unix timestamp every second.
	Subscribe(*Ping, Echo_SubscribeServer) error
}

func RegisterEchoServer(s *grpc.Server, srv EchoServer) {
	s.RegisterService(&_Echo_serviceDesc, srv)
}

func _Echo_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go_grpc_echo_pb.Echo/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServer).Send(ctx, req.(*Ping))
	}
	return interceptor(ctx, in, info, handler)
}

func _Echo_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Ping)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EchoServer).Subscribe(m, &echoSubscribeServer{stream})
}

type Echo_SubscribeServer interface {
	Send(*Pong) error
	grpc.ServerStream
}

type echoSubscribeServer struct {
	grpc.ServerStream
}

func (x *echoSubscribeServer) Send(m *Pong) error {
	return x.ServerStream.SendMsg(m)
}

var _Echo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "go_grpc_echo_pb.Echo",
	HandlerType: (*EchoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _Echo_Send_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _Echo_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "echo.proto",
}

func init() { proto.RegisterFile("echo.proto", fileDescriptor_echo_8ff4649e9e7bff03) }

var fileDescriptor_echo_8ff4649e9e7bff03 = []byte{
	// 198 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0x4d, 0xce, 0xc8,
	0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4f, 0xcf, 0x8f, 0x4f, 0x2f, 0x2a, 0x48, 0x8e,
	0x07, 0x89, 0xc5, 0x17, 0x24, 0x29, 0x29, 0x70, 0xb1, 0x04, 0x64, 0xe6, 0xa5, 0x0b, 0x49, 0x70,
	0xb1, 0xe7, 0xa6, 0x16, 0x17, 0x27, 0xa6, 0xa7, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0xc1,
	0xb8, 0x4a, 0x45, 0x5c, 0x2c, 0x01, 0xf9, 0xf8, 0x54, 0x08, 0xc9, 0x70, 0x71, 0x96, 0x64, 0xe6,
	0xa6, 0x16, 0x97, 0x24, 0xe6, 0x16, 0x48, 0x30, 0x29, 0x30, 0x6a, 0x30, 0x07, 0x21, 0x04, 0x84,
	0xa4, 0xb8, 0x38, 0x32, 0xf2, 0x8b, 0x4b, 0xf2, 0x12, 0x73, 0x53, 0x25, 0x98, 0xc1, 0x1a, 0xe1,
	0x7c, 0x21, 0x31, 0x2e, 0xb6, 0x8c, 0xd4, 0xc4, 0x94, 0xd4, 0x22, 0x09, 0x16, 0xb0, 0x0c, 0x94,
	0x67, 0x54, 0xcb, 0xc5, 0xe2, 0x9a, 0x9c, 0x91, 0x2f, 0x64, 0xc6, 0xc5, 0x12, 0x9c, 0x9a, 0x97,
	0x22, 0x24, 0xaa, 0x87, 0xe6, 0x6e, 0x3d, 0x90, 0xa3, 0xa5, 0xb0, 0x08, 0xe7, 0xe7, 0xa5, 0x2b,
	0x31, 0x08, 0xd9, 0x72, 0x71, 0x06, 0x97, 0x26, 0x15, 0x27, 0x17, 0x65, 0x26, 0xa5, 0x92, 0xaa,
	0xd9, 0x80, 0x31, 0x89, 0x0d, 0x1c, 0x58, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfb, 0xec,
	0x4a, 0xb5, 0x3a, 0x01, 0x00, 0x00,
}
